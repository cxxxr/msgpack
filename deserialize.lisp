(in-package :msgpack)

(defun load-big-endian (octets n pos)
  (loop :with bits := 0
        :for i :downfrom (1- n) :to 0
        :for p := pos :then (1+ p)
        :do (setf (ldb (byte 8 (* 8 i)) bits)
                  (aref octets p))
        :finally (return bits)))

(defun octets-to-signed-integer (octets n pos)
  (let ((bits (load-big-endian octets n pos)))
    (if (logbitp 7 (aref octets pos))
        (- (1+ (ldb (byte (* n 8) 0) (lognot bits))))
        bits)))

(defun octets-to-string (octets length pos)
  (babel:octets-to-string octets
                          :start pos :end (+ pos length)
                          :encoding :utf-8))

(defun ieee754-decode-float (nbits bits)
  (ecase nbits
    (32 (ieee-floats:decode-float32 bits))
    (64 (ieee-floats:decode-float64 bits))))

(defun deserialize (octets &optional (pos 0))
  (labels ((unsigned-integer (n)
             (prog1 (load-big-endian octets n pos)
               (incf pos n)))
           (signed-integer (n)
             (prog1 (octets-to-signed-integer octets n pos)
               (incf pos n)))
           (ieee754-float (nbits n)
             (prog1 (ieee754-decode-float nbits (load-big-endian octets n pos))
               (incf pos n)))
           (utf8-string (length n)
             (prog1 (octets-to-string octets length (+ pos n))
               (incf pos (+ n length))))
           (utf8-string* (n)
             (utf8-string (load-big-endian octets n pos) n))
           (byte-array (n)
             (let ((length (unsigned-integer n)))
               (prog1 (make-array length
                                  :element-type '(unsigned-byte 8)
                                  :displaced-to octets
                                  :displaced-index-offset pos)
                 (incf pos length))))
           (generic-array (length)
             (let ((array (make-array length)))
               (dotimes (i length)
                 (let (v)
                   (setf (values v pos) (deserialize octets pos))
                   (setf (aref array i) v)))
               array))
           (generic-array* (n)
             (generic-array (unsigned-integer n)))
           (hashmap (length)
             (let ((hash (make-hash-table :test 'equal)))
               (loop :with k :and v
                     :repeat length
                     :do (setf (values k pos) (deserialize octets pos)
                               (values v pos) (deserialize octets pos)
                               (gethash k hash) v))
               hash))
           (hashmap* (n)
             (hashmap (unsigned-integer n))))
    (let ((octet (aref octets pos)))
      (incf pos)
      (values (cond ((= octet #xC0) nil)
                    ((= octet #xC2) nil)
                    ((= octet #xC3) t)
                    ((not (logbitp 7 octet))
                     (ldb (byte 7 0) octet))
                    ((= #b111 (ldb (byte 3 5) octet))
                     (- (1+ (logand #b11111 (lognot octet)))))
                    ((= octet #xCC) (unsigned-integer 1))
                    ((= octet #xCD) (unsigned-integer 2))
                    ((= octet #xCE) (unsigned-integer 4))
                    ((= octet #xCF) (unsigned-integer 8))
                    ((= octet #xD0) (signed-integer 1))
                    ((= octet #xD1) (signed-integer 2))
                    ((= octet #xD2) (signed-integer 4))
                    ((= octet #xD3) (signed-integer 8))
                    ((= octet #xCA) (ieee754-float 32 4))
                    ((= octet #xCB) (ieee754-float 64 8))
                    ((= #b101 (ldb (byte 3 5) octet)) (utf8-string (ldb (byte 5 0) octet) 0))
                    ((= octet #xD9) (utf8-string* 1))
                    ((= octet #xDA) (utf8-string* 2))
                    ((= octet #xDB) (utf8-string* 4))
                    ((= octet #xC4) (byte-array 1))
                    ((= octet #xC5) (byte-array 2))
                    ((= octet #xC6) (byte-array 4))
                    ((= #b1001 (ldb (byte 4 4) octet)) (generic-array (ldb (byte 4 0) octet)))
                    ((= octet #xDC) (generic-array* 2))
                    ((= octet #xDD) (generic-array* 4))
                    ((= #b1000 (ldb (byte 4 4) octet)) (hashmap (ldb (byte 4 0) octet)))
                    ((= octet #xDE) (hashmap* 2))
                    ((= octet #xDF) (hashmap* 4))

                    ((= octet #xD4))
                    ((= octet #xD5))
                    ((= octet #xD6))
                    ((= octet #xD7))
                    ((= octet #xD8))
                    ((= octet #xC7))
                    ((= octet #xC8))
                    ((= octet #xC9))

                    (t (error "unexpected byte: ~B" octet)))
              pos))))
